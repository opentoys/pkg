//go:build ignore
// +build ignore

package main

import (
	"log"
	"os"
	"strings"
	"text/template"
	"time"
)

const fileTemplate = `// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}
package copier

import (
	"database/sql"
	"time"
	"unsafe"
)

func init() {
    funcs_funcs = &CopyFuncs{
        funcs: map[funcKey]func(dst, src unsafe.Pointer){
			

            {{- range $types :=.Types}}{{range $dst := $types}}{{range $src := $types}} 
            // {{$src}} to {{$dst}}
            {Src: funcs_typeOf({{$src}}({{default $src}})), Dst: funcs_typeOf({{$dst}}({{default $dst}}))}:    copy{{title $src}}To{{title $dst}},
            {Src: funcs_typeOfPointer({{$src}}({{default $src}})), Dst: funcs_typeOf({{$dst}}({{default $dst}}))}:    copyP{{title $src}}To{{title $dst}},
            {Src: funcs_typeOf({{$src}}({{default $src}})), Dst: funcs_typeOfPointer({{$dst}}({{default $dst}}))}:    copy{{title $src}}ToP{{title $dst}},
            {Src: funcs_typeOfPointer({{$src}}({{default $src}})), Dst: funcs_typeOfPointer({{$dst}}({{default $dst}}))}:    copyP{{title $src}}ToP{{title $dst}},
            {{- end}}{{end}}{{end}}	

			// SQL Null types
			{{- range $types :=.NullTypes}}{{range $null := $types.Nulls}}{{range $type := $types.Types}} 
            // {{$null}} to/from {{$type}}
            {Src: funcs_typeOf({{$null}}{}), Dst: funcs_typeOf({{$type}}({{default $type}}))}:    copy{{title $null}}To{{title $type}},
            {Src: funcs_typeOf({{$type}}({{default $type}})), Dst: funcs_typeOf({{$null}}{})}:    copy{{title $type}}To{{title $null}},
            {Src: funcs_typeOf({{$null}}{}), Dst: funcs_typeOfPointer({{$type}}({{default $type}}))}:    copy{{title $null}}ToP{{title $type}},
            {Src: funcs_typeOfPointer({{$type}}({{default $type}})), Dst: funcs_typeOf({{$null}}{})}:    copyP{{title $type}}To{{title $null}},
			{{- end}}{{end}}{{end}}	
		},
        sizes: []func(dst, src unsafe.Pointer){
            {{range $size := $.Sizes -}}
            copy{{$size}},
            {{- end}} 
        },
    }
}
{{range $types :=.Types}}{{range $dst := $types}}{{range $src := $types}} 

// {{$src}} to {{$dst}}

func copy{{title $src}}To{{title $dst}}(dst, src unsafe.Pointer) {
	*(*{{$dst}})(unsafe.Pointer(dst)) = {{$dst}}(*(*{{$src}})(unsafe.Pointer(src)))
}

func copyP{{title $src}}To{{title $dst}}(dst, src unsafe.Pointer) {
	var v {{$dst}}
	if p := *(**{{$src}})(unsafe.Pointer(src)); p != nil {
		v = {{$dst}}(*p)
	}
	*(*{{$dst}})(unsafe.Pointer(dst)) = v
}

func copy{{title $src}}ToP{{title $dst}}(dst, src unsafe.Pointer) {
	v := {{$dst}}(*(*{{$src}})(unsafe.Pointer(src)))
	p := (**{{$dst}})(unsafe.Pointer(dst))
	if p := *p; p != nil {
		*p = v
		return
	}
	*p = &v
}

func copyP{{title $src}}ToP{{title $dst}}(dst, src unsafe.Pointer) {
	pSrc := (**{{$src}})(unsafe.Pointer(src))
	pDst := (**{{$dst}})(unsafe.Pointer(dst))
	if *pSrc == nil {
		*pDst = nil
		return
	}

	v := {{$dst}}(**pSrc)
	if p := *pDst; p != nil {
		*p = v
		return
	}
	*pDst = &v
}
	
{{- end}}{{end}}{{end}}	

{{range $types :=.NullTypes}}{{range $null := $types.Nulls}}{{range $type := $types.Types}} 

{{$src := $null}}{{$dst := $type -}}
{{/* Copy NULL to {{$dst}} */}}
func copy{{title $src}}To{{title $dst}}(dst, src unsafe.Pointer) {
	null := *(*{{$src}})(unsafe.Pointer(src))
	*(*{{$dst}})(unsafe.Pointer(dst)) = {{$dst}}(null.{{nullField $src}})
}

{{$src := $type}}{{$dst := $null -}}
{{/* Copy {{$src}} to NULL */}}
func copy{{title $src}}To{{title $dst}}(dst, src unsafe.Pointer) {
	*(*{{$dst}})(unsafe.Pointer(dst)) = {{$dst}}{
		{{nullField $dst}}: {{nullFieldType $dst}}(*(*{{$src}})(unsafe.Pointer(src))),
        Valid: true,
	}
}

{{$src := $type}}{{$dst := $null -}}
{{/* Copy *{{$src}} to NULL */}}
func copyP{{title $src}}To{{title $dst}}(dst, src unsafe.Pointer) {
	var v {{$dst}}
	if p := *(**{{$src}})(unsafe.Pointer(src)); p != nil {
	    v.{{nullField $dst}} = {{nullFieldType $dst}}(*p)
        v.Valid = true
	}
	*(*{{$dst}})(unsafe.Pointer(dst)) = v
}

{{$src := $null}}{{$dst := $type -}}
{{/* Copy NULL to *{{$dst}} */}}
func copy{{title $src}}ToP{{title $dst}}(dst, src unsafe.Pointer) {
	null := *(*{{$src}})(unsafe.Pointer(src))
	p := (**{{$dst}})(unsafe.Pointer(dst))
	if !null.Valid {
		*p = nil
		return
	} 
	v := {{$dst}}(null.{{nullField $src}})
	if p := *p; p != nil {
	    *p = v
	    return
	}
	*p = &v
}

{{- end}}{{end}}{{end}}	

// Memcopy funcs
{{- range $size := $.Sizes}}
func copy{{$size}}(dst, src unsafe.Pointer) {
	*(*[{{$size}}]byte)(unsafe.Pointer(dst)) = *(*[{{$size}}]byte)(unsafe.Pointer(src))
}
{{end}} 
`

const maxBlockSize = 256

func title(s string) string {
	if strings.HasPrefix(s, "[]") {
		s = strings.TrimPrefix(s, "[]") + "s"
	}

	if parts := strings.Split(s, "."); len(parts) > 1 {
		s = parts[len(parts)-1]
	}

	return strings.Title(s)
}

func nullField(s string) string {
	return strings.TrimPrefix(s, "sql.Null")
}

func nullFieldType(s string) string {
	switch s := nullField(s); s {
	case "Time":
		return "time.Time"
	default:
		return strings.ToLower(s)
	}
}

func defaultValue(t string) string {
	switch t {
	case "bool":
		return "false"
	case "time.Time":
		return "time.Time{}"
	case "string":
		return `""`
	case "[]byte":
		return "nil"
	default:
		return "0"
	}
}

func createFile(path string) *os.File {
	file, err := os.Create(path)
	if err != nil {
		log.Fatalf(`unable to open file "%s": %s`, path, err)
	}

	return file
}

func main() {
	var data = struct {
		Timestamp time.Time
		XTypes    map[string][]string
		Types     [][]string
		NullTypes []struct {
			Nulls []string
			Types []string
		}
		Sizes []int
	}{
		Timestamp: time.Now().UTC(),
		XTypes: map[string][]string{
			"string":  {"int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "float32", "float64"},
			"*string": {"int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "float32", "float64"},
			"bool":    {"int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "float32", "float64"},
		},
		Types: [][]string{
			{
				"int", "int8", "int16", "int32", "int64",
				"uint", "uint8", "uint16", "uint32", "uint64",
			},
			{"float32", "float64"},
			{"bool"},
			{"complex64", "complex128"},
			{"string", "[]byte"},
			{"time.Time"},
			{"time.Duration"},
		},
		NullTypes: []struct {
			Nulls []string
			Types []string
		}{
			{
				Nulls: []string{"sql.NullInt32", "sql.NullInt64"},
				Types: []string{
					"int", "int8", "int16", "int32", "int64",
					"uint", "uint8", "uint16", "uint32", "uint64",
				},
			},
			{
				Nulls: []string{"sql.NullFloat64"},
				Types: []string{"float32", "float64"},
			},
			{
				Nulls: []string{"sql.NullBool"},
				Types: []string{"bool"},
			},
			{
				Nulls: []string{"sql.NullString"},
				Types: []string{"string", "[]byte"},
			},
			{
				Nulls: []string{"sql.NullTime"},
				Types: []string{"time.Time"},
			},
		},
	}

	for i := 1; i <= maxBlockSize; i++ {
		data.Sizes = append(data.Sizes, i)
	}

	funcMap := template.FuncMap{
		"title":         title,
		"nullField":     nullField,
		"nullFieldType": nullFieldType,
		"default":       defaultValue,
	}

	tmpl, err := template.New("template").Funcs(funcMap).Parse(fileTemplate)
	if err != nil {
		log.Fatalf("parsing: %s", err)
	}

	file := createFile("afuncs.gen.go")
	defer file.Close()

	err = tmpl.Execute(file, data)
	if err != nil {
		log.Fatalf("execution: %s", err)
	}
}
